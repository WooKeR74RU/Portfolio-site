<!DOCTYPE html>
<head>
    <meta charset="utf-8"/>
    <title>⚜ More than words, less than wisdom ⚜</title>
    <meta property="og:title" content="⚜ More than words, less than wisdom ⚜">

    <script type="text/javascript" src="https://vk.com/js/api/share.js?95" charset="windows-1251"></script>
</head>

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.1/css/all.css">
<link href="../public/css/bootstrap.min.css" rel="stylesheet">
<link href="../public/css/mdb.min.css" rel="stylesheet">
<script type="text/javascript" src="../public/build/bundle.js"></script>

<html lang="ru">


<body style="max-height: 100vh" class="animated fadeIn fast">

{% block navBar %}
    {% include './navBar.twig' %}
{% endblock %}

{% block content %}
{% endblock %}

{% include  './footer.twig' with {hostname: hostname} %}


<script type="text/javascript" src="../public/js/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="../public/js/popper.min.js"></script>
<script type="text/javascript" src="../public/js/bootstrap.min.js"></script>
<script type="text/javascript" src="../public/js/mdb.min.js"></script>

<script>
    new WOW().init()
</script>


<script>
    let phraseContainer = document.getElementById("phraseContainer")
    let authorContainer = document.getElementById("authorContainer")
    let quoteContainer = document.getElementById("quoteContainer")
    let likeBtn = document.getElementById("likeBtn");
    let likesCount = document.getElementById("likesCount");
    let vkButton = document.getElementById("vkButton");

    let likesCounter = 0;

    let res = [];
    var current = -1;


    function shuffle(a) {
        for (let i = a.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [a[i], a[j]] = [a[j], a[i]];
        }
        return a;
    }

    async function StartInit() {
        res = (await getJSON("https://api.mlab.com/api/1/databases/heroku_wlzlp8gz/collections/quotes?apiKey=ZpiR6lx2sN0U7Dva96IC89CTuRn8VZWH"));
        console.log(res);
        res = shuffle(res);
        setPhrase();
        likesCount.style.visibility = "visible"
    }


    let like = function () {

        if (likeBtn.classList.contains('animated'))
            return;

        likeBtn.classList.add('animated', 'pulse');

        if (likeBtn.classList.contains('fas')) {
            likesCounter--;
            setDisliked();
            res[current]['likes'] = remove(res[current]['likes'], getUserId())
        } else {
            likesCounter++;
            setLiked();
            res[current]['likes'].push(getUserId());
        }


        likeBtn.addEventListener('animationend', function () {
            likeBtn.classList.remove('animated');
            likeBtn.classList.remove('pulse');


            $.ajax({
                url: `https://api.mlab.com/api/1/databases/heroku_wlzlp8gz/collections/quotes?apiKey=ZpiR6lx2sN0U7Dva96IC89CTuRn8VZWH&q=${JSON.stringify({"_id": res[current]['_id']})}`,
                data: JSON.stringify(res[current]),
                type: "PUT",
                contentType: "application/json"
            });


        })

    };

    let setLiked = function () {
        likeBtn.classList.remove('far');
        likeBtn.classList.add('fas');
        likeBtn.style.color = 'red';
        likesCount.innerText = ` ${likesCounter}`;
    };
    let setDisliked = function () {
        likeBtn.classList.remove('fas');
        likeBtn.classList.add('far');
        likeBtn.style.color = 'black';
        likesCount.innerText = ` ${likesCounter}`;
    };

    function makeid(len) {
        let text = "";
        let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < len; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    }

    let shareVk = function () {
        window.open('https://vk.com/share.php?url={{ hostname }}&title=' + res[current]['phrase'], '_blank');
    };

    let getUserId = function () {
        if (localStorage.getItem("UID") === null) {
            let id = makeid(25);
            localStorage.setItem("UID", id);
            return id;
        }
        return localStorage.getItem("UID");
    };

    let contains = function (jsonArray, el) {
        for (i = 0; i < jsonArray.length; i++) {

            if (jsonArray[i] === el)
                return true;
        }
        return false;
    };

    let remove = function (jsonArray, el) {
        let rez = [];
        for (i = 0; i < jsonArray.length; i++) {

            if (jsonArray[i] !== el)
                rez.push(jsonArray[i]);
        }
        return rez;
    };


    let setPhrase = function () {
        let id = getUserId();

        current++;
        current = current % res.length;

        likesCounter = res[current]['likes'].length;

        quoteContainer.classList.add('fadeOut');
        quoteContainer.classList.remove('fadeIn');

        window.setTimeout(function () {
            if (contains(res[current]['likes'], id))
                setLiked();
            else
                setDisliked();

            phraseContainer.innerHTML = res[current]['phrase'];
            authorContainer.innerHTML = res[current]['author'];
            quoteContainer.classList.remove('fadeOut');
            quoteContainer.classList.add('fadeIn');
        }, 400)

    };

    function randNum(arr, excludeNum) {
        console.log("HGFghj")
        let randNumber = Math.floor(Math.random() * arr.length);
        if (randNumber === excludeNum) {
            return randNum(arr, excludeNum);
        } else {
            return randNumber;
        }
    }

    let getJSON = function (url) {
        return new Promise(function (resolve, reject) {
            let xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    resolve(xhr.response);
                } else {
                    reject({
                        status: this.status,
                        statusText: xhr.statusText
                    });
                }
            };

            xhr.onerror = function () {
                reject({
                    status: this.status,
                    statusText: xhr.statusText
                });
            };
            xhr.send();
        });
    };

    StartInit();

</script>

<style>
    .quoteContainer {
        opacity: 1;
        transition: opacity 0.4s;
    }

    .fadeOut {
        opacity: 0;
    }

    .fadeIn {
        opacity: 1;
    }

    .btn:hover {
        background: #f5f5f5 !important;
    }

    .btn {
        background: transparent !important;
        color: #000 !important;
        box-shadow: none !important;
    }
</style>

</body>
</html>